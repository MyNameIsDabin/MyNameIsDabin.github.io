<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-09-30T03:19:14+00:00</updated><id>/feed.xml</id><title type="html">초긍정 개발자 다빈</title><subtitle></subtitle><entry><title type="html">고도엔진(Godot Engine)으로 첫 프로젝트를 끝내고</title><link href="/workreview/2019/09/28/00.html" rel="alternate" type="text/html" title="고도엔진(Godot Engine)으로 첫 프로젝트를 끝내고" /><published>2019-09-28T22:32:00+00:00</published><updated>2019-09-28T22:32:00+00:00</updated><id>/workreview/2019/09/28/00</id><content type="html" xml:base="/workreview/2019/09/28/00.html">&lt;h4 id=&quot;첫-고도엔진-프로젝트-gong-개발-완료-후기&quot;&gt;첫 고도엔진 프로젝트 GONG 개발 완료 후기&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/2019-09-29-00/0.png&quot; alt=&quot;&amp;quot;Godot Engine&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금껏 사용하던 cocos2d-x 엔진이 작년부터 개발 방향을 cocos-creator 로 바꾸면서 기존 투자자가 많이 빠져나가고 결국에 최신 동향을 따라오지 못하는 모습에 새로운 엔진이 필요하다는걸 알았습니다.&lt;/p&gt;

&lt;p&gt;다행히도 현재 시장에 나와있는 게임 엔진은 차고 넘칩니다. 국내에서 가장 많이 사용되는 유니티, 언리얼부터 시작해서 2D에 특화된 디폴드, 게임메이커 등등.. 정말 많습니다. 그 중 제가 필요로 하는 엔진은 cocos2d-x 보다 생산성이 좋으면서 Unity 보다는 가벼운 엔진을 원했습니다. 앞으로 개발할 게임들의 대부분은 모바일 플랫폼이며, 규모가 크지 않을 게임들이었기에 엄청난 성능이나 쓸데없이 많은 기능들이 필요하지 않았죠.&lt;/p&gt;

&lt;p&gt;군 복무 도중에 사지방에서도 돌아갈만큼 가벼운 고도 엔진(Godot Engine)을 접했고 전역 후 본격적으로 고도 엔진에 대해서 공부했으며 이번에 드디어 첫 번째 게임을 개발할 수 있게 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;처음 접했을 때 고도 엔진의 버전은 2.x 버전 이었습니다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/2019-09-29-00/1.png&quot; alt=&quot;&amp;quot;GONG&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇게 해서 개발된 첫 번째 고도 게임 공(GONG)은 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.davin.gong&quot;&gt;플레이 스토어&lt;/a&gt;에 출시되어 있습니다. 아마도 ios 작업도 이후에 진행할까 합니다.&lt;/p&gt;

&lt;p&gt;이번에 개발 기간은 한 달 정도 걸렸습니다. 고도에 익숙해져서 게임을 출시하는 단계까지 가기에 충분할 정도로 엔진을 배우기가 쉬웠고 이 짧은기간 동안 저는 고도 엔진의 강점을 제대로 느낄 수 있었습니다. 타 엔진에서 프리팹(Prefab)이라고 칭하는 것들이 고도에서는 씬(Scene)이라고 부르는데, 이 씬을 마우스 클릭 몇 번으로 상속시켜 새로운 씬을 만들 수 있으며 작업 중인 노드 구조에서 언제든지 원하는 트리를 골라서 새로운 씬으로 묶을 수 있습니다. 특히나 윈도우에서 작업했던 프로젝트를 맥으로 옮겨서 프로젝트를 구동시키는데 5분이 채 걸리지 않았던 사용감은 아직도 기억에 남네요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/2019-09-29-00/2.png&quot; alt=&quot;&amp;quot;GONG (초기 버전)&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;초기 버전의 GONG의 스크린샷. 눈이 아프다는 의견이 많아서 출시 직전 쉐이더를 모두 갈아엎었다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;물론 고도의 부족한점도 느끼긴 했습니다. 자체 스크립트인 GDScript를 사용하면서 겪었던 &lt;a href=&quot;https://github.com/godotengine/godot/issues/32386&quot;&gt;이슈&lt;/a&gt;가 몇가지 있었고 아직은 부실하게 느껴질만한 기능들도 눈에 보이긴 했습니다. 하지만 확실한건 개발함에 있어서 불편함을 크게 주지 않았고 단점보다도 장점이 훨씬 눈에 띄었던 엔진이라는 것. 그래서 저는 다음 게임에도 고도엔진을 사용할까 합니다. &lt;a href=&quot;https://godotengine.org/&quot;&gt;고도엔진&lt;/a&gt;은 일주일정도 마다 새로운 소식을 알려주는데, 관심이 있으시다면 한번 확인해보시는건 어떤가요?&lt;/p&gt;</content><author><name></name></author><summary type="html">첫 고도엔진 프로젝트 GONG 개발 완료 후기</summary></entry><entry><title type="html">=== 쓰세요</title><link href="/javascript/2019/08/14/00.html" rel="alternate" type="text/html" title="=== 쓰세요" /><published>2019-08-14T18:16:00+00:00</published><updated>2019-08-14T18:16:00+00:00</updated><id>/javascript/2019/08/14/00</id><content type="html" xml:base="/javascript/2019/08/14/00.html">&lt;h4 id=&quot;-와--연산자에-대한-오해&quot;&gt;== 와 === 연산자에 대한 오해&lt;/h4&gt;
&lt;p&gt;== 연산자와 === 연산자는 모두 자바스크립트에서 동등함을 비교할 때 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 둘의 차이점을 당장 급하게 이해하고 싶다면 위의 예제 하나로 충분합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;== 연산자는 값이 동등한지만 확인하고 === 연산자는 값이 동등하고, 타입까지 동등한지 비교합니다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 설명은 정확하지 않지만 시간이 없는 개발자들에게 빠른 이해를 돕게 하는 가성비 좋은 설명이라고는 생각합니다. 그렇다면 이 글을 느긋하게 커피 한잔 마시면서 천천히 읽어도 시간이 남아도는 개발자들이라면 이 연산자에 대한 좀 더 자세한 내용을 알아두실 필요가 있겠네요. 사실 두 연산자의 진짜 차이점은 단순히 타입까지 동등한지 비교하는 것이 아닌, 우리 몰래 암묵적으로 형 변환을 허용하는가 입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;== 연산자는 암묵적 형 변환을 허용하고 === 연산자는 암묵적 형 변환을 허용하지 않습니다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이제는 위와같이 정의할 수 있겠네요.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 실제로는 (Number(&quot;100&quot;) === 100) 로 비교함.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다시 위의 예제를 살펴볼까요? == 연산자의 경우 개발자 몰래 비교할 때 암묵적으로 형 변환을 진행하기 때문에 위와 같이 문자열과 숫자를 비교하는 경우에 문자열을 숫자로 형 변환한 후 비교를 진행하기 때문에 결과는 true가 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;-연산자의-문제점&quot;&gt;== 연산자의 문제점&lt;/h4&gt;

&lt;p&gt;이 포스트의 제목을 ‘=== 쓰세요’ 라고 지은 이유는 사실 여러분들에게 === 연산자를 쓰라고 강제하고 싶은 마음보다는 == 연산자가 가지고 있는 단점을 피하는 가장 쉬운 방법은 그냥 === 연산자를 사용하는 것이기 때문입니다. 다음 문제점을 살펴봅시다.&lt;/p&gt;

&lt;h5 id=&quot;복잡한-형변환-규칙&quot;&gt;복잡한 형변환 규칙&lt;/h5&gt;

&lt;p&gt;개발자 몰래 형 변환하는 것 까진 좋은데 이 규칙 자체가 워낙 복잡한데다가 지멋대로 일때가 많습니다. 애초에 == 연산자의 진짜 이름이 추상적 동등비교 인 것 부터 코드의 가독성과는 조금 먼 이야기라는게 느껴집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/2019-08-15-00/0.png&quot; alt=&quot;&amp;quot;추상적 동등비교&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot;&gt;Equality_comparisons_and_sameness&lt;/a&gt; 에서 확인할 수 있는 추상적 동등비교(==)를 사용했을 때 발생하는 형변환을 정리해 놓은 표 입니다. 이 표를 달달 외우고 다닐 개발자가 몇이나 될지는 모르겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;예상하기-어려운-형-변환&quot;&gt;예상하기 어려운 형 변환&lt;/h5&gt;

&lt;p&gt;당신이 결벽이 심한 개발자라서 복잡한 표를 전부 달달 외웠더라도 형 변환을 쉽게 예측하는건 어렵습니다. 자바스크립트의 암묵적 형변환에 대한 특이 사례(물론 제대로 짚고 넘어가면 합리적일테지만)는 여러 존재하지만 그 중 몇개를 추려보았습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;흠.. 그렇습니다. 이해하기 힘들겠지만 자바스크립트 입장에서는 나름 합리적인 형변환이 이루어집니다. 굳이 어떻게 형 변환 되는지 살펴보자면 첫번째 라인의 경우 일단 배열의 경우 toPrimitive 정의에 의해서 배열은 문자열로 형 변환 됩니다. 때문에 Array(3)은 String(Array(3))로 형 변환 되면서 “,,” 가 되고, 결과적으로 true로 비교됩니다. 그렇다면 두번째 라인은 어떨까요?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두번째 라인의 경우 문자열로 형 변환 되는 두 “0” 이 리터럴인지 아닌지를 생각하면 됩니다. 배열 [0] 이 문자열로 형 변환 될 때 리터럴이 아닌 위 예제에서의 후자의 경우처럼 만들어지기 때문에 false가 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [] == false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세번째 라인의 경우 동등비교 이전에 위와같이 ! 연산자로 인해서 Boolean 으로 변환되어 비교된다는걸 잊지 않는다면 추론할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;-쓰세요&quot;&gt;=== 쓰세요&lt;/h4&gt;

&lt;p&gt;암묵적 형 변환은 속사정을 들어보면 나름 합리적이지만 예측하기 어려운게 사실입니다. 대부분의 경우 여러분의 예상대로 작동하겠지만 결국 버그는 예측하지 못하는 상황에서 발생합니다. 다시 말하지만 == 연산자의 동작방식을 정확히 이해하지 못하겠다면 그냥 피하는게 답입니다.&lt;/p&gt;</content><author><name></name></author><summary type="html">== 와 === 연산자에 대한 오해 == 연산자와 === 연산자는 모두 자바스크립트에서 동등함을 비교할 때 사용합니다.</summary></entry></feed>